"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const TipoCondicaoEnum_1 = require("../Enums/TipoCondicaoEnum");
const TipoOperadorEnum_1 = require("../Enums/TipoOperadorEnum");
class HtmlBadgerHelper {
    static getTextoByProduto(operacao, produtos) {
        operacao = this.getTextoOperacao(operacao);
        let descriptionList = [];
        if (produtos.length > 0) {
            for (let produto of produtos) {
                descriptionList.push(produto.descricao);
            }
        }
        else
            descriptionList.push('TODOS');
        return this.getHTMLPill('badge-primary', `Produto ${operacao} ${descriptionList.join(', ')}`);
    }
    static getTextoByAgrupadorEmpresa(operacao, agrupadores) {
        operacao = this.getTextoOperacao(operacao);
        let descriptionList = [];
        for (let agrupador of agrupadores) {
            descriptionList.push(agrupador.descricao);
        }
        return this.getHTMLPill('badge-medium-green', `Agrupador de Empresa ${operacao} ${descriptionList.join(', ')}`);
    }
    static getTextoByEmpresa(operacao, empresas) {
        operacao = this.getTextoOperacao(operacao);
        let descriptionList = [];
        if (empresas.length > 0) {
            for (let empresa of empresas) {
                descriptionList.push(empresa.nomEmpresa);
            }
        }
        else
            descriptionList.push('TODOS');
        return this.getHTMLPill('badge-secondary', `Empresa ${operacao} ${descriptionList.join(', ')}`);
    }
    static getTextoByTag(operacao, tags) {
        operacao = this.getTextoOperacao(operacao);
        let descriptionList = [];
        for (let tag of tags) {
            descriptionList.push(tag.nome);
        }
        return this.getHTMLPill('badge-warning', `Tag ${operacao} ${descriptionList.join(', ')}`);
    }
    static getTextoByFormaPagamento(operacao, formasPagamento) {
        operacao = this.getTextoOperacao(operacao);
        let descriptionList = [];
        if (formasPagamento.length > 0) {
            for (let formaPagamento of formasPagamento) {
                descriptionList.push(formaPagamento.descricao);
            }
        }
        else
            descriptionList.push('TODOS');
        return this.getHTMLPill('badge-info', `Forma Pagamento ${operacao} ${descriptionList.join(', ')}`);
    }
    static getTextoOperacao(operacao) {
        let resultado;
        switch (operacao) {
            case '=':
                resultado = 'igual a';
                break;
            case '<>':
                resultado = 'diferente de';
                break;
            case 'contem':
                resultado = 'for uma das opções:';
                break;
            default:
                resultado = 'ERROR';
        }
        return resultado;
    }
    static getTextoCondicaoPreFormated(condicoes) {
        var textoValor = 'se ';
        for (let [index, condicao] of condicoes.entries()) {
            textoValor += condicao.condicaoTexto;
            if (index < condicoes.length - 1) {
                if (condicoes[index].atributoEntradaUuid === condicoes[index + 1].atributoEntradaUuid) {
                    textoValor += ' ou ';
                }
                else {
                    textoValor += ' e ';
                }
            }
        }
        if (!condicoes.some((cond) => cond.atributo === 'Empresa')) {
            textoValor += ` e ${HtmlBadgerHelper.getTextoByEmpresa('=', [])}`;
        }
        if (!condicoes.some((cond) => cond.atributo === 'Produto')) {
            textoValor += ` e ${HtmlBadgerHelper.getTextoByProduto('=', [])}`;
        }
        if (!condicoes.some((cond) => cond.atributo === 'Forma Pagamento')) {
            textoValor += ` e ${HtmlBadgerHelper.getTextoByFormaPagamento('=', [])}`;
        }
        return textoValor;
    }
    static formatTextoCondicao(condicoes) {
        var textoValor = 'se ';
        for (let [index, condicao] of condicoes.entries()) {
            switch (condicao.atributo) {
                case TipoCondicaoEnum_1.TipoCondicaoEnum.Produto:
                    textoValor += HtmlBadgerHelper.getTextoByProduto(condicao.operador, [
                        { descricao: condicao.condicaoTexto },
                    ]);
                    break;
                case TipoCondicaoEnum_1.TipoCondicaoEnum.FormaPagamento:
                    textoValor += HtmlBadgerHelper.getTextoByFormaPagamento(condicao.operador, [
                        { descricao: condicao.condicaoTexto },
                    ]);
                    break;
                case TipoCondicaoEnum_1.TipoCondicaoEnum.Empresa:
                    textoValor += HtmlBadgerHelper.getTextoByEmpresa(condicao.operador, [
                        { nomEmpresa: condicao.condicaoTexto },
                    ]);
                    break;
                case TipoCondicaoEnum_1.TipoCondicaoEnum.Tag:
                    textoValor += HtmlBadgerHelper.getTextoByTag(condicao.operador, [
                        { nome: condicao.condicaoTexto },
                    ]);
                    break;
                case TipoCondicaoEnum_1.TipoCondicaoEnum.AgrupadorEmpresa:
                    textoValor += HtmlBadgerHelper.getTextoByAgrupadorEmpresa(condicao.operador, [
                        { descricao: condicao.condicaoTexto },
                    ]);
                    break;
                default:
                    textoValor = 'ERROR';
            }
            if (index < condicoes.length - 1) {
                if (condicoes[index].atributoEntradaUuid === condicoes[index + 1].atributoEntradaUuid) {
                    textoValor += ' ou ';
                }
                else {
                    textoValor += ' e ';
                }
            }
        }
        if (!condicoes.some((cond) => cond.atributo === 'Empresa')) {
            textoValor += ` e ${HtmlBadgerHelper.getTextoByEmpresa(TipoOperadorEnum_1.TipoOperadorEnum.Igual, [])}`;
        }
        if (!condicoes.some((cond) => cond.atributo === 'Produto')) {
            textoValor += ` e ${HtmlBadgerHelper.getTextoByProduto(TipoOperadorEnum_1.TipoOperadorEnum.Igual, [])}`;
        }
        if (!condicoes.some((cond) => cond.atributo === 'Forma Pagamento')) {
            textoValor += ` e ${HtmlBadgerHelper.getTextoByFormaPagamento(TipoOperadorEnum_1.TipoOperadorEnum.Igual, [])}`;
        }
        return textoValor;
    }
    static getHTMLPill(color, texto) {
        return `<span class="badge ${color} text-wrap">${texto}</span>`;
    }
}
exports.default = HtmlBadgerHelper;
