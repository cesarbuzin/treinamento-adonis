"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DateHelper = void 0;
const moment = require("moment");
class DateHelper {
    static normalizeDate(mixedDate) {
        return typeof mixedDate === 'string' ? new Date() : mixedDate;
    }
    static validateDateBetweenTwoDatesWithDate(fromDate, toDate, givenDate) {
        return givenDate <= this.normalizeDate(toDate) && givenDate >= this.normalizeDate(fromDate);
    }
    static validateDateBetweenTwoDatesWithString(fromDate, toDate, givenDate) {
        return this.validateDateBetweenTwoDatesWithDate(fromDate, toDate, this.normalizeDate(givenDate));
    }
    static validateCurrentDateBetweenTwoDates(fromDate, toDate) {
        return this.validateDateBetweenTwoDatesWithDate(fromDate, toDate, new Date());
    }
    static dateToStringFormatBR(date) {
        return this.dateToStringFormat(date, 'DD/MM/yyyy');
    }
    static dateToStringFormat(date, format) {
        return moment(date).format(format);
    }
    static getDifferenceInMinutes(startData, endData) {
        return Math.trunc((Math.abs(startData.getTime() - endData.getTime()) / 36e5) * 60);
    }
    static isTodayFromString(date) {
        return this.isTodayFromDate(new Date(date));
    }
    static isTodayFromDate(data) {
        const today = new Date();
        return today.toISOString().split('T')[0] === data.toISOString().split('T')[0];
    }
    static isYesterdayFromString(date) {
        return this.isYesterdayFromDate(new Date(date));
    }
    static isYesterdayFromDate(data) {
        const today = new Date();
        return (new Date(today.setDate(today.getDate() - 1)).toISOString().split('T')[0] ===
            data.toISOString().split('T')[0]);
    }
    static stringToDate(dateTime) {
        try {
            const dateTimeSplit = dateTime.split(' ');
            const date = dateTimeSplit[0].split('/');
            const yyyy = Number.parseInt(date[2].substring(0, 4));
            const mm = Number.parseInt(date[1]);
            const dd = Number.parseInt(date[0]);
            const time = dateTimeSplit[1].split(':');
            const h = Number.parseInt(time[0]);
            const m = Number.parseInt(time[1]);
            return new Date(yyyy, mm, dd, h, m);
        }
        catch (_a) {
            return new Date('invalid date');
        }
    }
    static minusTime(date, days, hours, minutes, seconds, milisseconds) {
        let subtractedMilisseconds = (days ? days * 86400000 : 0) +
            (hours ? hours * 3600000 : 0) +
            (minutes ? minutes * 60000 : 0) +
            (seconds ? seconds * 1000 : 0) +
            (milisseconds ? milisseconds : 0);
        var returnedDate = new Date(date.getTime() - subtractedMilisseconds);
        return returnedDate;
    }
    static plusTime(date, days, hours, minutes, seconds, milisseconds) {
        let subtractedMilisseconds = (days ? days * 86400000 : 0) +
            (hours ? hours * 3600000 : 0) +
            (minutes ? minutes * 60000 : 0) +
            (seconds ? seconds * 1000 : 0) +
            (milisseconds ? milisseconds : 0);
        var returnedDate = new Date(date.getTime() + subtractedMilisseconds);
        return returnedDate;
    }
}
exports.DateHelper = DateHelper;
