"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CryptHelper = void 0;
const crypto = require("crypto");
const CryptoJS = require('crypto-js');
const alg = 'aes-256-ctr';
const pwd = 'Macaco';
class CryptHelper {
    static encrypt(mensagem) {
        const cipher = crypto.createCipher(alg, pwd);
        const crypted = cipher.update(mensagem, 'utf8', 'hex');
        return crypted;
    }
    static decrypt(mensagem) {
        const decipher = crypto.createDecipher(alg, pwd);
        const plain = decipher.update(mensagem, 'hex', 'utf8');
        return plain;
    }
    static AESEncrypt(text) {
        return __awaiter(this, void 0, void 0, function* () {
            const key = CryptoJS.enc.Utf8.parse(process.env.AES_SECRET_KEY);
            const mode = CryptoJS.mode.ECB;
            return CryptoJS.AES.encrypt(text, key, { mode: mode }).toString();
        });
    }
    static AESDecrypt(text) {
        return __awaiter(this, void 0, void 0, function* () {
            const key = CryptoJS.enc.Utf8.parse(process.env.AES_SECRET_KEY);
            const mode = CryptoJS.mode.ECB;
            return CryptoJS.AES.decrypt(text, key, { mode: mode }).toString(CryptoJS.enc.Utf8);
        });
    }
}
exports.CryptHelper = CryptHelper;
