"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GooglePubSubSubscription = void 0;
const pubsub_1 = require("@google-cloud/pubsub");
const PubSubModel_1 = require("../Models/PubSubModel");
class GooglePubSubSubscription {
    constructor(subscriptionName) {
        this._subscription = new pubsub_1.PubSub().subscription(subscriptionName);
    }
    listenMessages(eventEmitter) {
        return __awaiter(this, void 0, void 0, function* () {
            this._subscription.on('message', (message) => {
                const data = JSON.parse(message.data.toString());
                const pubSubModel = new PubSubModel_1.PubSubModel(data.value, data.action, data.table);
                eventEmitter.emit('event', [pubSubModel, message]);
            });
            this._subscription.on('error', (error) => {
                console.error('Received error:', error);
                eventEmitter.emit('error', error);
            });
        });
    }
}
exports.GooglePubSubSubscription = GooglePubSubSubscription;
