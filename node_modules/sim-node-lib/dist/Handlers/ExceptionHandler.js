"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.errorSwitch = void 0;
const Enums_1 = require("../Enums");
const BasicException_1 = require("../Models/BasicException");
function errorSwitch(error, ctx, logger) {
    return __awaiter(this, void 0, void 0, function* () {
        switch (error.code) {
            case Enums_1.ExceptionsCodesEnum.validationFailed:
                logger.warn(error);
                return ctx.response.unprocessableEntity(new BasicException_1.default(error.code, `${error.messages.errors
                    ?
                        error.messages.errors[0].message
                    :
                        Object.values(error.messages)[0]}`));
            case Enums_1.ExceptionsCodesEnum.unauthorized:
                logger.warn(error);
                return ctx.response.unauthorized(new BasicException_1.default(error.code, Enums_1.ExceptionsMessagesEnum.unauthorized + ` (${error.message})`));
            case Enums_1.ExceptionsCodesEnum.rowNotFound:
                logger.warn(error);
                return ctx.response.notFound(new BasicException_1.default(error.code, Enums_1.ExceptionsMessagesEnum.rowNotFound));
            case Enums_1.ExceptionsCodesEnum.invalidAuthPassword:
                logger.warn(error);
                return ctx.response.unauthorized(new BasicException_1.default(error.code, Enums_1.ExceptionsMessagesEnum.invalidAuthPassword));
            case Enums_1.ExceptionsCodesEnum.tooManyRequests:
                logger.warn(error);
                return ctx.response.tooManyRequests(new BasicException_1.default(error.code, Enums_1.ExceptionsMessagesEnum.tooManyRequests));
            case Enums_1.ExceptionsCodesEnum.internalServerError:
                logger.error('Erro: ', error);
                logger.error('Code: ', error.code);
                logger.error('Mensagem: ', error.message);
                logger.error('Stack: ', error.stack);
                return ctx.response.internalServerError(new BasicException_1.default(error.code, 'Ocorreu um erro interno.'));
            case Enums_1.ExceptionsCodesEnum.notAcceptable:
                logger.warn(error);
                return ctx.response.notAcceptable(new BasicException_1.default(error.code, error.message));
            case Enums_1.ExceptionsCodesEnum.routeNotFound:
                logger.warn(error);
                return ctx.response.notFound(new BasicException_1.default(error.code, Enums_1.ExceptionsMessagesEnum.routeNotFound));
            default:
                logger.error('Erro: ' + error);
                logger.error('Code: ' + error.code);
                logger.error('Mensagem: ' + error.message);
                logger.error('Stack: ' + error.stack);
                return ctx.response.internalServerError(new BasicException_1.default(Enums_1.ExceptionsCodesEnum.internalServerError, 'Ocorreu um erro interno desconhecido.'));
        }
    });
}
exports.errorSwitch = errorSwitch;
