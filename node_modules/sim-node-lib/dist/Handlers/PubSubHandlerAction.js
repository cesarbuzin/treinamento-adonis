"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PubSubHandlerAction = void 0;
class PubSubHandlerAction {
    constructor(pubsubModel) {
        this._pubsubValueModel = pubsubModel;
    }
    handlerAction() {
        return __awaiter(this, void 0, void 0, function* () {
            switch (this._pubsubValueModel.action) {
                case 'insert':
                    return yield this.insert();
                case 'insert_many':
                    return yield this.insertMany();
                case 'update':
                    return yield this.update();
                case 'update_many':
                    return yield this.updateMany();
                case 'delete':
                    return yield this.delete();
                case 'delete_many':
                    return yield this.deleteMany();
                default:
                    return true;
            }
        });
    }
    insert() {
        throw new Error('Method insert PubSub handler action not implemented.');
    }
    insertMany() {
        throw new Error('Method insertMany PubSub handler action not implemented.');
    }
    update() {
        throw new Error('Method update PubSub handler action not implemented.');
    }
    updateMany() {
        throw new Error('Method updateMany PubSub handler action not implemented.');
    }
    delete() {
        throw new Error('Method delete PubSub handler action not implemented.');
    }
    deleteMany() {
        throw new Error('Method deleteMany PubSub handler action not implemented.');
    }
    buildData() {
        throw new Error('Method buildData PubSub handler action not implemented.');
    }
}
exports.PubSubHandlerAction = PubSubHandlerAction;
