"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AxiosService = void 0;
const axios_1 = require("axios");
const dotenv = require("dotenv");
let headers;
class AxiosService {
    constructor(url) {
        this.url = url;
        dotenv.config();
    }
    authSim(auth) {
        var _a;
        let authEnv = (_a = process.env.AUTHORIZATION) !== null && _a !== void 0 ? _a : '';
        let authString = 'Basic ' + authEnv;
        if (auth) {
            authString = 'Basic ' + auth;
        }
        headers = {
            authorization: authString,
        };
        return this;
    }
    get(params, data, responseType) {
        return __awaiter(this, void 0, void 0, function* () {
            let content = {
                method: 'get',
                headers: headers,
                params: params ? params : undefined,
                data: data ? data : undefined,
                responseType: responseType ? responseType : 'json',
            };
            return yield (0, axios_1.default)(this.url, content)
                .then((response) => {
                return response;
            })
                .catch((reason) => {
                throw reason;
            });
        });
    }
    post(params, data) {
        return __awaiter(this, void 0, void 0, function* () {
            let content = {
                method: 'post',
                headers: headers,
                params: params ? params : undefined,
                data: data ? data : undefined,
            };
            return yield (0, axios_1.default)(this.url, content)
                .then((response) => {
                return response;
            })
                .catch((reason) => {
                throw reason;
            });
        });
    }
    put(params, data) {
        return __awaiter(this, void 0, void 0, function* () {
            let content = {
                method: 'put',
                headers: headers,
                params: params ? params : undefined,
                data: data ? data : undefined,
            };
            return yield (0, axios_1.default)(this.url, content)
                .then((response) => {
                return response;
            })
                .catch((reason) => {
                throw reason;
            });
        });
    }
    delete(params, data) {
        return __awaiter(this, void 0, void 0, function* () {
            let content = {
                method: 'delete',
                headers: headers,
                params: params ? params : undefined,
                data: data ? data : undefined,
            };
            return yield (0, axios_1.default)(this.url, content)
                .then((response) => {
                return response;
            })
                .catch((reason) => {
                throw reason;
            });
        });
    }
    byPass(method, data, params) {
        return __awaiter(this, void 0, void 0, function* () {
            let content = {
                method: method,
                headers: headers,
                params: params ? params : undefined,
                data: data ? data : undefined,
            };
            return yield (0, axios_1.default)(this.url, content);
        });
    }
}
exports.AxiosService = AxiosService;
