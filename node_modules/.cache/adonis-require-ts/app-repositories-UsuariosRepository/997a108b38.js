"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UsuariosRepository = void 0;
const Usuario_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Usuario"));
const GenericResponseException_1 = __importDefault(global[Symbol.for('ioc.use')]("App/exceptions/GenericResponseException"));
class UsuariosRepository {
    async save(usuarios) {
        return await Usuario_1.default.create(usuarios);
    }
    async list() {
        return await Usuario_1.default.all();
    }
    async findById(id_usuario) {
        return await Usuario_1.default.findBy('id_usuario', id_usuario);
    }
    async update(id_usuario, usuarios) {
        const usuariosSaved = await Usuario_1.default.findOrFail(id_usuario);
        if (usuariosSaved === null) {
            throw new GenericResponseException_1.default('Usuario informado não encontrado para atualização', 400);
        }
        return await usuariosSaved
            .merge(usuarios)
            .save()
            .catch((erro) => {
            throw new GenericResponseException_1.default(erro.message, 500);
        });
    }
    async delete(id_usuario) {
        const usuariosSaved = await Usuario_1.default.findOrFail(id_usuario);
        if (usuariosSaved === null) {
            throw new GenericResponseException_1.default('Usuario informado não encontrado para atualização', 400);
        }
        await usuariosSaved.delete();
        return usuariosSaved.id;
    }
}
exports.UsuariosRepository = UsuariosRepository;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXN1YXJpb3NSZXBvc2l0b3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiVXN1YXJpb3NSZXBvc2l0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLHVGQUF5QztBQUN6Qyw2SEFBOEU7QUFFOUUsTUFBYSxrQkFBa0I7SUFDdEIsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFrQjtRQUNsQyxPQUFPLE1BQU0saUJBQVEsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUE7SUFDeEMsQ0FBQztJQUVNLEtBQUssQ0FBQyxJQUFJO1FBQ2YsT0FBTyxNQUFNLGlCQUFRLENBQUMsR0FBRyxFQUFFLENBQUE7SUFDN0IsQ0FBQztJQUVNLEtBQUssQ0FBQyxRQUFRLENBQUMsVUFBa0I7UUFDdEMsT0FBTyxNQUFNLGlCQUFRLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxVQUFVLENBQUMsQ0FBQTtJQUN4RCxDQUFDO0lBRU0sS0FBSyxDQUFDLE1BQU0sQ0FBQyxVQUFrQixFQUFFLFFBQWtCO1FBQ3hELE1BQU0sYUFBYSxHQUFHLE1BQU0saUJBQVEsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUE7UUFFM0QsSUFBSSxhQUFhLEtBQUssSUFBSSxFQUFFO1lBQzFCLE1BQU0sSUFBSSxrQ0FBd0IsQ0FBQyxtREFBbUQsRUFBRSxHQUFHLENBQUMsQ0FBQTtTQUM3RjtRQUVELE9BQU8sTUFBTSxhQUFhO2FBQ3ZCLEtBQUssQ0FBQyxRQUFRLENBQUM7YUFDZixJQUFJLEVBQUU7YUFDTixLQUFLLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUNkLE1BQU0sSUFBSSxrQ0FBd0IsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFBO1FBQ3ZELENBQUMsQ0FBQyxDQUFBO0lBQ04sQ0FBQztJQUVNLEtBQUssQ0FBQyxNQUFNLENBQUMsVUFBa0I7UUFDcEMsTUFBTSxhQUFhLEdBQUcsTUFBTSxpQkFBUSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUUzRCxJQUFJLGFBQWEsS0FBSyxJQUFJLEVBQUU7WUFDMUIsTUFBTSxJQUFJLGtDQUF3QixDQUFDLG1EQUFtRCxFQUFFLEdBQUcsQ0FBQyxDQUFBO1NBQzdGO1FBRUQsTUFBTSxhQUFhLENBQUMsTUFBTSxFQUFFLENBQUE7UUFFNUIsT0FBTyxhQUFhLENBQUMsRUFBRSxDQUFBO0lBQ3pCLENBQUM7Q0FDRjtBQXZDRCxnREF1Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVXN1YXJpb3MgZnJvbSAnQXBwL01vZGVscy9Vc3VhcmlvJ1xuaW1wb3J0IEdlbmVyaWNSZXNwb25zZUV4Y2VwdGlvbiBmcm9tICdBcHAvZXhjZXB0aW9ucy9HZW5lcmljUmVzcG9uc2VFeGNlcHRpb24nXG5cbmV4cG9ydCBjbGFzcyBVc3Vhcmlvc1JlcG9zaXRvcnkge1xuICBwdWJsaWMgYXN5bmMgc2F2ZSh1c3VhcmlvczogVXN1YXJpb3MpOiBQcm9taXNlPFVzdWFyaW9zPiB7XG4gICAgcmV0dXJuIGF3YWl0IFVzdWFyaW9zLmNyZWF0ZSh1c3VhcmlvcylcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBsaXN0KCk6IFByb21pc2U8VXN1YXJpb3NbXT4ge1xuICAgIHJldHVybiBhd2FpdCBVc3Vhcmlvcy5hbGwoKVxuICB9XG5cbiAgcHVibGljIGFzeW5jIGZpbmRCeUlkKGlkX3VzdWFyaW86IHN0cmluZyk6IFByb21pc2U8VXN1YXJpb3MgfCBudWxsPiB7XG4gICAgcmV0dXJuIGF3YWl0IFVzdWFyaW9zLmZpbmRCeSgnaWRfdXN1YXJpbycsIGlkX3VzdWFyaW8pXG4gIH1cblxuICBwdWJsaWMgYXN5bmMgdXBkYXRlKGlkX3VzdWFyaW86IFN0cmluZywgdXN1YXJpb3M6IFVzdWFyaW9zKTogUHJvbWlzZTxVc3Vhcmlvcz4ge1xuICAgIGNvbnN0IHVzdWFyaW9zU2F2ZWQgPSBhd2FpdCBVc3Vhcmlvcy5maW5kT3JGYWlsKGlkX3VzdWFyaW8pXG5cbiAgICBpZiAodXN1YXJpb3NTYXZlZCA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEdlbmVyaWNSZXNwb25zZUV4Y2VwdGlvbignVXN1YXJpbyBpbmZvcm1hZG8gbsOjbyBlbmNvbnRyYWRvIHBhcmEgYXR1YWxpemHDp8OjbycsIDQwMClcbiAgICB9XG5cbiAgICByZXR1cm4gYXdhaXQgdXN1YXJpb3NTYXZlZFxuICAgICAgLm1lcmdlKHVzdWFyaW9zKVxuICAgICAgLnNhdmUoKVxuICAgICAgLmNhdGNoKChlcnJvKSA9PiB7XG4gICAgICAgIHRocm93IG5ldyBHZW5lcmljUmVzcG9uc2VFeGNlcHRpb24oZXJyby5tZXNzYWdlLCA1MDApXG4gICAgICB9KVxuICB9XG5cbiAgcHVibGljIGFzeW5jIGRlbGV0ZShpZF91c3VhcmlvOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIGNvbnN0IHVzdWFyaW9zU2F2ZWQgPSBhd2FpdCBVc3Vhcmlvcy5maW5kT3JGYWlsKGlkX3VzdWFyaW8pXG5cbiAgICBpZiAodXN1YXJpb3NTYXZlZCA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEdlbmVyaWNSZXNwb25zZUV4Y2VwdGlvbignVXN1YXJpbyBpbmZvcm1hZG8gbsOjbyBlbmNvbnRyYWRvIHBhcmEgYXR1YWxpemHDp8OjbycsIDQwMClcbiAgICB9XG5cbiAgICBhd2FpdCB1c3Vhcmlvc1NhdmVkLmRlbGV0ZSgpXG5cbiAgICByZXR1cm4gdXN1YXJpb3NTYXZlZC5pZFxuICB9XG59XG4iXX0=