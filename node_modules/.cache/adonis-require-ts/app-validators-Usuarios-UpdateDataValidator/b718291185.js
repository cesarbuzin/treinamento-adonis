"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Validator_1 = global[Symbol.for('ioc.use')]("Adonis/Core/Validator");
class UpdateDataValidator {
    constructor(ctx) {
        this.ctx = ctx;
        this.schema = Validator_1.schema.create({
            nom_usuario: Validator_1.schema.string.optional({}, [
                Validator_1.rules.trim(),
                Validator_1.rules.maxLength(400),
                Validator_1.rules.minLength(3),
            ]),
            login: Validator_1.schema.string.optional({}, [
                Validator_1.rules.trim(),
                Validator_1.rules.maxLength(400),
                Validator_1.rules.minLength(3),
                Validator_1.rules.unique({ table: 'usuarios', column: 'login' }),
            ]),
            password: Validator_1.schema.string.optional({}, [Validator_1.rules.trim(), Validator_1.rules.maxLength(400), Validator_1.rules.minLength(6)]),
        });
        this.messages = {
            required: 'É necessário preencher o campo {{ field }}',
            minLength: 'Informe no minimo 3 caracteres no campo {{ field }}',
            maxLength: 'Informe no máximo 400 caracteres no campo {{ field }}',
            uuid: 'Necessário informar um ID no formato UUID V4 no campo {{ field }}',
            unique: 'Campo {{ field }} já existe com o valor informado',
        };
    }
}
exports.default = UpdateDataValidator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXBkYXRlRGF0YVZhbGlkYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlVwZGF0ZURhdGFWYWxpZGF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSwyRUFBMEU7QUFFMUUsTUFBcUIsbUJBQW1CO0lBQ3RDLFlBQXNCLEdBQXdCO1FBQXhCLFFBQUcsR0FBSCxHQUFHLENBQXFCO1FBRXZDLFdBQU0sR0FBRyxrQkFBTSxDQUFDLE1BQU0sQ0FBQztZQUM1QixXQUFXLEVBQUUsa0JBQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsRUFBRTtnQkFDdEMsaUJBQUssQ0FBQyxJQUFJLEVBQUU7Z0JBQ1osaUJBQUssQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDO2dCQUNwQixpQkFBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7YUFDbkIsQ0FBQztZQUNGLEtBQUssRUFBRSxrQkFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUFFO2dCQUNoQyxpQkFBSyxDQUFDLElBQUksRUFBRTtnQkFDWixpQkFBSyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUM7Z0JBQ3BCLGlCQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztnQkFDbEIsaUJBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsQ0FBQzthQUNyRCxDQUFDO1lBQ0YsUUFBUSxFQUFFLGtCQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBSyxDQUFDLElBQUksRUFBRSxFQUFFLGlCQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFLGlCQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FFL0YsQ0FBQyxDQUFBO1FBRUssYUFBUSxHQUFtQjtZQUNoQyxRQUFRLEVBQUUsNENBQTRDO1lBQ3RELFNBQVMsRUFBRSxxREFBcUQ7WUFDaEUsU0FBUyxFQUFFLHVEQUF1RDtZQUNsRSxJQUFJLEVBQUUsbUVBQW1FO1lBQ3pFLE1BQU0sRUFBRSxtREFBbUQ7U0FDNUQsQ0FBQTtJQXhCZ0QsQ0FBQztDQXlCbkQ7QUExQkQsc0NBMEJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBIdHRwQ29udGV4dENvbnRyYWN0IH0gZnJvbSAnQGlvYzpBZG9uaXMvQ29yZS9IdHRwQ29udGV4dCdcbmltcG9ydCB7IEN1c3RvbU1lc3NhZ2VzLCBydWxlcywgc2NoZW1hIH0gZnJvbSAnQGlvYzpBZG9uaXMvQ29yZS9WYWxpZGF0b3InXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVwZGF0ZURhdGFWYWxpZGF0b3Ige1xuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgY3R4OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7fVxuXG4gIHB1YmxpYyBzY2hlbWEgPSBzY2hlbWEuY3JlYXRlKHtcbiAgICBub21fdXN1YXJpbzogc2NoZW1hLnN0cmluZy5vcHRpb25hbCh7fSwgW1xuICAgICAgcnVsZXMudHJpbSgpLFxuICAgICAgcnVsZXMubWF4TGVuZ3RoKDQwMCksXG4gICAgICBydWxlcy5taW5MZW5ndGgoMyksXG4gICAgXSksXG4gICAgbG9naW46IHNjaGVtYS5zdHJpbmcub3B0aW9uYWwoe30sIFtcbiAgICAgIHJ1bGVzLnRyaW0oKSxcbiAgICAgIHJ1bGVzLm1heExlbmd0aCg0MDApLFxuICAgICAgcnVsZXMubWluTGVuZ3RoKDMpLFxuICAgICAgcnVsZXMudW5pcXVlKHsgdGFibGU6ICd1c3VhcmlvcycsIGNvbHVtbjogJ2xvZ2luJyB9KSxcbiAgICBdKSxcbiAgICBwYXNzd29yZDogc2NoZW1hLnN0cmluZy5vcHRpb25hbCh7fSwgW3J1bGVzLnRyaW0oKSwgcnVsZXMubWF4TGVuZ3RoKDQwMCksIHJ1bGVzLm1pbkxlbmd0aCg2KV0pLFxuICAgIC8vb2xkX3Bhc3N3b3JkOiBzY2hlbWEuc3RyaW5nLm9wdGlvbmFsKHt9LCBbcnVsZXMudHJpbSgpLCBydWxlcy5tYXhMZW5ndGgoNDAwKSwgcnVsZXMubWluTGVuZ3RoKDYpXSksXG4gIH0pXG5cbiAgcHVibGljIG1lc3NhZ2VzOiBDdXN0b21NZXNzYWdlcyA9IHtcbiAgICByZXF1aXJlZDogJ8OJIG5lY2Vzc8OhcmlvIHByZWVuY2hlciBvIGNhbXBvIHt7IGZpZWxkIH19JyxcbiAgICBtaW5MZW5ndGg6ICdJbmZvcm1lIG5vIG1pbmltbyAzIGNhcmFjdGVyZXMgbm8gY2FtcG8ge3sgZmllbGQgfX0nLFxuICAgIG1heExlbmd0aDogJ0luZm9ybWUgbm8gbcOheGltbyA0MDAgY2FyYWN0ZXJlcyBubyBjYW1wbyB7eyBmaWVsZCB9fScsXG4gICAgdXVpZDogJ05lY2Vzc8OhcmlvIGluZm9ybWFyIHVtIElEIG5vIGZvcm1hdG8gVVVJRCBWNCBubyBjYW1wbyB7eyBmaWVsZCB9fScsXG4gICAgdW5pcXVlOiAnQ2FtcG8ge3sgZmllbGQgfX0gasOhIGV4aXN0ZSBjb20gbyB2YWxvciBpbmZvcm1hZG8nLFxuICB9XG59XG4iXX0=